// models/user.js
const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");

const userSchema = new mongoose.Schema(
Â  {
    
Â  Â  username: { type: String, required: true, unique: true },
Â  Â  email: { type: String, required: true, unique: true }, // ðŸ‘ˆ ADDED for profile
Â  Â  phone: { type: String, required: false }, Â  Â  Â  Â  Â  Â  Â  // ðŸ‘ˆ ADDED for profile
Â  Â  password: { type: String, required: true },
Â  Â  loyaltyPoints: { type: Number, default: 0 }, Â  Â  Â  Â  Â  // ðŸ‘ˆ ADDED for profile
Â  Â  role: {
Â  Â  Â  type: String,
Â  Â  Â  default: "guest",
Â  Â  Â  enum: ["guest", "employee", "receptionist", "manager", "admin"],
Â  Â  },
Â  },
Â  { timestamps: true }
);

// Hash password before saving
userSchema.pre("save", async function (next) {
Â  if (!this.isModified("password")) return next();
Â  this.password = await bcrypt.hash(this.password, 10);
Â  next();
});

// Compare entered password with hashed one
userSchema.methods.matchPassword = function (enteredPassword) {
Â  return bcrypt.compare(enteredPassword, this.password);
};

// Avoid recompiling model in dev
module.exports = mongoose.models.User || mongoose.model("User", userSchema); // Changed "users" to "User" for consistency